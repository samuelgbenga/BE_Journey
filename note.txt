Beginning Node.js by Basarati Ali Syed ******** Date Dec 21/2022

Immediately Executing Function
You can execute a function immediately after you define it. Simply wrap the function in parentheses () and invoke it,
as shown in Listing 2-12.
Example:
(function foo() {
console.log('foo was executed!');
})();

There is the: Normal function
Immediate executing function
Anonymous function ( function without name Assigned to variable)
Higer-order function Functions that take functions as arguments are called higher-order functions.

Understanding Node.js performance: page 23
Understanding prototype in js
 
Stopped at page 48: Timer
*****************************
Dec 25/2022
what is:
	process.nextTick
	Buffer

stopped at page 67
**********************
Again Dec 27/2022 (i didnt do anything on the 26 "and i dont know why"
just finished :
		node_module still trying to wrap my head around it
		i understand node module as a folder system not a file system
		and also it as a differenct way of scanning from file system 
		file system uses some high level js programing shit to organis module
		meanwhile node_module just uses folder structer to scan.
		
*************************************************
Back to my senses again: Dec 28/2022
Start at page 78
	use rimraf to delete an js file localy or globaly on command line.
	underscore module (underscore.js function)
	like so:
	var _ = require('underscore');
	_.reject(arg1, arg2) or _.filter(arg1, arg2)
	.
	.
	optimist function used in place of process to collect all console arguments
	e.g process.argv replaced with
		require("optimist").argv
		
	you can use moment module to extensively manipulate date and time in nodejs
	in place of the inbuilt Date module

	json serialization means stringifying js object to json which is done by this function
	toJSON (if exist) or JSON.stringify(js object)
	
	__defineGetter__/__defineSetter__ to plug a function in way that it can be called like
	a metho. Sample code is:
	
	String.prototype.__defineGetter__('red', function (str) {
	// Changes the console foreground to red
	var redCode = '\x1b[31m';
	// Resets the console foreground
	var clearCode = '\x1b[39m';
	return redCode + this + clearCode;
	});
	console.log('Hello World!'.red);
	
	if red was a function it would have been called as red()
	
	
Chapter 5 events and streams
	
	
	
the difference between import and require: one is flexible the order is not (can be called anywhere)
					one allows dynamic import the other one does not (dont get)
					
					

**************************************************************************************
starting from chapter five jan 1/2023

Events and streams

******************************************
what page am i? start from page 96.
The proper Node.js way:

stopped at page 98
overriding functions in child classes
stopped at page 100: EventEmitter
****************************
After a long day: began from Event Emitter (January 4 2022).
The goal is to complet seven page. thorouly
*************************************
started again today excluding saturday i have missed whole two days: 5 and 6 of january.
.
.started from page 100:
goal is to complete 10 pages only:
first step:
- fast read without practicals ( pay attention!! the Headings and Sub-Headings)
  ( no need to take notes)
- go through the codes with your eyes only to see if you can understand the logic
  ( you can take notes)
- then ask and answer questions and google 
		What is the code for?
		study the different components of the code (you can google)?.
		google the latest version of the code (write the code in the new version
		if need be)		
- lastly read the whole thing again.
  (no need to take note)
  
  *******************************************
  
  
*********' what i discovered while working with eventemitter is that
- while multiple subscription the different events shares a single object. ergo (therefor)
	modification of that object by one event will affect the object to be passed or used by 
 the next event since its thesame object that has been modified. But this is not the same for variable, if the parameter of the callback function is a variable it will be copied by the different subscription ( of events). Hence a modification by one
	subscription will not affect the other copies of the variable on other subscription



















































					
					
